[% start_year=2012 %]
[% MACRO example(file) BLOCK %]
[%- pl = file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/[% info.name %]-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]

=head1 NAME

C::Utility - utilities for generating C programs

=head1 SYNOPSIS

   use C::Utility ':all';

=head1 VERSION

This documents [% info.colon %] version [% info.version %]
corresponding to git commit L<[% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

This module contains functions which assist in automatic generation of
C programs. For work with strings, L</convert_to_c_string> converts a
string into a string with characters correctly escaped for use in a C
program. L</convert_to_c_string_pc> does the same thing plus escaping
percent signs so that they may be used as format strings for
printf. L</escape_string> escapes double quotes. L</valid_c_variable>
checks whether a string is valid as a C variable. 

The module contains various line directive related
functions. L</line_directive> prints a C line directive. L</linein>
and L</lineout> offer a preprocessor and postprocessor to add line
numbers to files made from templates.

=head1 EXPORTS

All the functions are exported on demand. Nothing is exported by
default. An export tag C<:all> exports all the functions.

    use C::Utility ':all';

=head1 FUNCTIONS

=head2 add_lines

    my $text = add_lines ($file);

Read C<$file>, and replace strings of the form #line in the file with
a C-style line directive using C<$file>. Also add a line directive to
the first line of the file. C<$file> must be in the UTF-8
encoding. The line directives are given the full path name of the file
using L<File::Spec/rel2abs>. The return value is the text of the input
file with the line directives added.

I recommend using L</linein> in combination with L</lineout> rather
than this function, since it does not properly handle line directives
for generated parts of the C file.

=head2 brute_force_line

    brute_force_line ($input_file, $output_file);

Read C<$input_file>, put #line directives on every single line, and
write that to C<$output_file>.

I recommend using L</linein> in combination with L</lineout> rather
than this function, since it does not properly handle line directives
for generated parts of the C file.

=head2 c_string

Alias for L</convert_to_c_string>.

=head2 c_to_h_name

    my $h_file = c_to_h_name ("frog.c");
    # $h_file = "frog.h".

Make a C<.h> file name from a C<.c> file name. 

This is not a very useful function, and I do not use it anywhere any
more.

=head2 ch_files

    my $hfile = ch_files ($c_file_name);

This makes a C<.h> filename from a C<.c> filename, and backs up both
the C and the C<.h> files using L<File::Versions>. See also
L</c_to_h_name>. It dies if the input C<$c_file_name> does not end in
C<.c>.

This is not a very useful function, and I use it in only one place.

=head2 convert_to_c_string

    my $c_string = convert_to_c_string ($perl_string);

This converts a Perl string into a C string by converting backslashes
to double backslashes, escaping double quotes with L</escape_string>,
turning newlines into C<\n> characters, and adding double quotes.

For example,

[% example("fox") %]

It also removes backslashes from before the @ symbol, so \@ is
transformed to @. Newlines within the input string are turned into
concatenated strings. Empty inputs are turned into a pair of double
quotes, C<"">.

=head2 convert_to_c_string_pc

    my $c_string = convert_to_c_string_pc ($string);     

This is similar to L</convert_to_c_string>, but it also converts the
percent character C<%> to a double percent, C<%%>. This is for
generating strings which may be used as C format strings without
generating an error because of embedded percent characters.

[% example("fox-pc") %]

=head2 escape_string

   my $escaped_string = escape_string ($normal_string);

This returns the value of the argument with double quotes C<"> escaped
with a backslash.

=head2 hash_to_c_file

    my $h_file = hash_to_c_file ($c_file_name, \%hash);

This turns a Perl hash into a set of C<const char *> strings and
writes it to a C file specified by C<$c_file_name>, and a header file
with a similar name. For example,

[% example("michael-caine") %]

The return value is the name of the header file used.

The keys of the hash are checked with L</valid_c_variable>, and the
routine dies if they are not valid C variable names.

An optional third argument may contain a prefix to add to all the
variable names.

For example,

    hash_to_c_file ('that.c', {ok => 'yes'}, 'super_');

outputs

    const char * super_ok = "yes";

The use case of this function is a convenient way to make small C
configuration files. I currently do not use this function at all,
since it tends to cause about as many problems as it solves.

The behaviour of returning the name of the header file was added in
version 0.006.

=head2 line_directive

This prints a C preprocessor line directive to the file specified by
C<$fh>. If C<$fh> is a scalar reference, it concatenates the line
directive to the end of it. For example,

     line_directive ($fh, 42, "file.x")

prints

     #line 42 "file.x"

to C<$fh>. 

[% example("line-directive") %]

This function is useful if you cannot remember the syntax for line
directives, since it checks that your line number is valid. I
currently only use this in one place.

=head2 linein

    my $intext = linein ($infile);

Given a file F<$infile>, this opens the file, reads it in, replaces
the text C<#linein> in the file with a C line directive referring to
the original file, then returns the complete text as its return value.

I use this to read in a template before processing with L<Template> to
add the line numbers of the input template.

=head2 lineout

    lineout ($outtext, $outfile);

Given a C output text C<$outtext> and a file name F<$outfile>, this
writes out the text to F<$outfile>, replacing the text C<#lineout>
with an appropriate line directive using C<$outfile> as the file name
and the lines of the file as the line numbers.

[% example("lineout") %]

I use this to write text which has been processed by L<Template> to
add line numbers to the output.

=head2 print_bottom_h_wrapper

    print_bottom_h_wrapper ($file_handle, $file_name);

Print the bottom part of an include wrapper for a .h file to
C<$file_handle>.

The name of the wrapper comes from L</wrapper_name> applied to
C<$file_name>.

If C<$file_handle> is a scalar reference, this concatenates the
wrapper to the scalar.

I barely use this function and don't consider it to be very useful.

See also L</print_top_h_wrapper>.

=head2 print_include

    print_include ($file_handle, $file_name);

Print an #include statement for a .h file named C<$file_name> to
C<$file_handle>:

    #include "file.h"

I do not currently use this function anywhere, and don't consider it
useful.

=head2 print_top_h_wrapper

    print_top_h_wrapper ($file_handle, $file_name);
    # Prints #ifndef wrapper at top of file.

Print an "include wrapper" for a .h file to C<$file_handle>. For
example,

    #ifndef MY_FILE
    #define MY_FILE

The name of the wrapper comes from L</wrapper_name> applied to
C<$file_name>. If C<$file_handle> is a scalar reference, this
concatenates the wrapper to the scalar.

I barely use this function and don't consider it to be very useful.

See also L</print_bottom_h_wrapper>.

=head2 read_includes

    my $includes = read_includes ($file);

Given a C file C<$file>, read the file in and find all lines of the
form

    #include "some.h"

or

    #include <another.h>

and return the list of included files as an array reference. See
L<C::Tokenize/$include> for the regular expression to match the
includes. It skips C<#include> statements within comments using
L<C::Tokenize/$comment_re>.

This function was added in version 0.008.

=head2 remove_quotes

    my $unquoted_string = remove_quotes ($string);

This removes the leading and trailing quotes from C<$string>. It also
removes the "joining quotes" in composite C strings. Thus input of the
form B<"composite " "C" " string"> is converted into B<composite C
string> without the quotes.

This function probably should not be in this module at all.

=head2 stamp_file

    stamp_file ($fh);

Add a stamp to file handle C<$fh> containing the name of the program
which created it, and the time of generation.

The name of the C file output can be added as a second argument:

    stamp_file ($fh, $name);

If C<$fh> is a scalar reference, the stamp is concatenated to it.

[% example("stamp-file") %]

This is not a very useful function because of the following nuisance
side effect. When using a system based on "make" and "diff" to build
your C project, the date and time in the stamp made by C<stamp_file>
forces unnecessary rebuilds by changing your file each time it is run,
even when the actual program contents have not changed. I tend not to
use this version of this function any more but use a substitute one
which doesn't add the time and date to the file.

This function was added in version 0.006.

=head2 valid_c_variable

    my $ok = valid_c_variable ($variable_name);

This returns 1 if C<$variable_name> is a valid C variable, the
undefined value otherwise. It tests for two things. First that the
argument only contains the allowed characters, C<[0-9a-zA-Z_]>, for a
C variable, and second that the argument is not a C keyword like
C<goto> or C<volatile>. The rejected word list contains C99 keywords
like C<_Bool>. See L<C::Tokenize/$reserved_re> for exactly what is
rejected.

=head2 wrapper_name

    my $wrapper = wrapper_name ($file_name);

Given a file name, this returns a suitable C preprocessor wrapper name
based on the file name. The wrapper name is the uppercase version of
the file name with hyphens and dots replaced with underscores.

This does not strip out directory paths from C<$file_name>.

This is not a useful function, and I do not use it anywhere.

=head1 DEPENDENCIES

=over

=item Carp

L<Carp> is used to report errors.

=item C::Tokenize

The regular expressions of L<C::Tokenize> are used in various places.

=item File::Spec

L<File::Spec> is used to get the base name of the file from the
argument to L</hash_to_c_file>, and to get the absolute name of the
file in L</add_lines>.

=item File::Versions

L<File::Versions> is used to back up files

=item File::Slurper

L<File::Slurper> is used to read and write text files. This has the
caveat that in some places this module assumes your C source files use
the UTF-8 encoding.

=item Text::LineNumber

L<Text::LineNumber> is used by L</linein> and L</lineout>. It's not used by L</line> or L</brute_force_line>

=back

=head1 HISTORY

Most of the functions in this module are for supporting automated C
code generators.

[% info.colon %] was on CPAN, but then deleted between version 0.005
and version 0.006. I don't know of anyone who was using the module,
but I decided to restore it to CPAN anyway, since I'm still using and
maintaining it, and it might be useful to somebody.

[% INCLUDE "author" %]
